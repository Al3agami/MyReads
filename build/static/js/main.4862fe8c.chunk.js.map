{"version":3,"sources":["BooksAPI.js","Book.js","Shelf.js","ShelfsList.js","SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","props","react_default","a","createElement","className","style","width","height","backgroundImage","imageLinks","smallThumbnail","defaultValue","onChange","e","onShelfChange","target","value","disabled","title","authors","map","Shelf","shelfName","src_Book","key","ShelfsList","src_Shelf","filter","b","react_router_dom","to","SearchBooks","state","result","queryChangeHandler","_this","setState","trim","length","handleSearch","_books$filter","curr","currBooks","toLowerCase","includes","some","cb","apply","toConsumableArray","_this2","this","type","placeholder","Component","BooksApp","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getAllBooks","BooksAPI","Books","handleShelfChange","shelfId","updatedBooks","find","updateBook","keys","forEach","bId","legacyUpdateBook","react_router","exact","path","render","_ref","history","src_SearchBooks","push","src_ShelfsList","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4862fe8c.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst Book = (props) => {\n    return (\n            <li>\n                <div className=\"book\">\n                    <div className=\"book-top\">\n                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${props.book.imageLinks.smallThumbnail})` }}></div>\n                        <div className=\"book-shelf-changer\">\n                            <select defaultValue={(props.book.shelf ? props.book.shelf : 'none')} onChange={(e) => props.onShelfChange(props.book, e.target.value)}>\n                                <option value=\"move\" disabled>Move to...</option>\n                                <option value=\"currentlyReading\">Currently Reading</option>\n                                <option value=\"wantToRead\">Want to Read</option>\n                                <option value=\"read\">Read</option>\n                                <option value=\"none\">None</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"book-title\">{props.book.title}</div>\n                    <div className=\"book-authors\">{props.book.authors.map(a => a+'\\n')}</div>\n                </div>\n            </li>\n    );\n}\n\nBook.propTypes = {\n    book: PropTypes.shape({\n        shelf: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        authors: PropTypes.array.isRequired,\n        imageLinks: PropTypes.shape({ smallThumbnail: PropTypes.string.isRequired})\n    }),\n    onShelfChange: PropTypes.func.isRequired\n}\n\n\nexport default Book;","import React from 'react'\nimport Book from './Book'\nimport PropTypes from 'prop-types';\n\nconst Shelf = (props) => {\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{props.shelfName}</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {props.books.map(book => (\n                            <Book\n                                key={book.id}\n                                book={book}\n                                onShelfChange={props.onShelfChange}/>\n                        )\n                    )}\n                </ol>\n            </div>\n        </div>\n\n    );\n}\n\nShelf.propTypes = {\n    shelfName: PropTypes.string.isRequired,\n    books: PropTypes.array.isRequired,\n    onShelfChange: PropTypes.func.isRequired\n}\n\n\nexport default Shelf;","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport Shelf from './Shelf';\nimport PropTypes from 'prop-types';\n\nconst ShelfsList = (props) => {\n\n    const Shelfs = [\n        {\n            title: \"Currently Reading\",\n            id: \"currentlyReading\"\n        },\n        {\n            title: \"Want To Read\",\n            id: \"wantToRead\"\n        },\n        {\n            title: \"Read\",\n            id: \"read\"\n        }\n    ];\n\n    return(\n            <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                    <h1>MyReads</h1>\n                </div>\n                <div className=\"list-books-content\">\n                    <div>\n                        {Shelfs.map(shelf => (\n                            <Shelf\n                                key={shelf.id}\n                                shelfName={shelf.title}\n                                onShelfChange={props.onShelfChange}\n                                books={props.books.filter(b => b.shelf === shelf.id)}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <Link to=\"/search\" className=\"open-search\">\n                    <button>Add a book</button>\n                </Link>\n            </div>\n        );\n\n\n}\n\nShelfsList.propTypes = {\n    onShelfChange: PropTypes.func.isRequired,\n    books: PropTypes.array.isRequired\n}\n\nexport default ShelfsList;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Book from './Book';\nimport { search } from './BooksAPI';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\n\nclass SearchBooks extends Component {\n    static propTypes = {\n        currBooks: PropTypes.array.isRequired,\n        onShelfChange: PropTypes.func.isRequired\n    }\n    state = {\n        query:'',\n        result:[]\n    };\n\n    queryChangeHandler = (e) => {\n        this.setState({ query: e.target.value.trim() });\n        if (e.target.value.trim().length > 2){\n            this.handleSearch();\n        }else{\n            this.setState({result:[]});\n        }\n    };\n\n    handleSearch = () => {\n        search(this.state.query).then(books => {\n            const curr = this.props.currBooks.filter(b => b.title.toLowerCase().includes(this.state.query.toLowerCase()));\n            (books != null && books.length > 0) ? \n                this.setState({\n                    result: books.filter(b =>\n                        b.authors != null\n                        && b.authors.length > 0\n                        && b.imageLinks != null\n                        && b.imageLinks.smallThumbnail != null\n                        && b.imageLinks.smallThumbnail !== ''\n                        && !this.props.currBooks.some(cb => cb.id === b.id)\n                    ).concat(...curr)\n                }) :\n                this.setState({ result: [...curr] });\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to=\"/\" className=\"close-search\">Close</Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input\n                            onChange={this.queryChangeHandler}\n                            value={this.state.query}\n                            type=\"text\"\n                            placeholder=\"Search by title or author\" />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    {this.state.result.length === 0 && this.state.query.length > 2 ?\n                        <h4 className=\"no-match-found\">No Books Match Your Query</h4> :\n                        (\n                            <ol className=\"books-grid\">\n                                {this.state.result.map(book => (\n                                    <Book\n                                        key={book.id}\n                                        book={book}\n                                        onShelfChange={this.props.onShelfChange} />\n                                    )\n                                )}\n                            </ol>\n                        )}\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBooks;","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport { Route } from 'react-router-dom'\nimport ShelfsList from './ShelfsList';\nimport SearchBooks from './SearchBooks';\n\nclass BooksApp extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      Books: []\n    }\n  }\n\n  componentDidMount = () =>{\n    this.getAllBooks();\n  }\n\n  \n  getAllBooks = () => {\n    BooksAPI.getAll().then(Books => {\n      this.setState({ Books });\n    });\n  }\n\n  handleShelfChange = (book, shelfId) => {\n    const curr = this.state.Books;\n    if (shelfId === 'none') {\n      const updatedBooks = curr.filter(b => b.id !== book.id);\n      this.setState({ Books: updatedBooks });\n    } else if (!curr.find(b => b.id === book.id)) {\n      //new book\n      book.shelf = shelfId;\n      this.setState({ Books: [...curr, book] });\n    }\n    this.updateBook(book, shelfId);\n  }\n\n  updateBook = (book, shelfId) => {\n    BooksAPI.update(book, shelfId).then(res => {\n      const curr = this.state.Books;\n      Object.keys(res).forEach(key => {\n        res[key].forEach(bId => {\n          curr.find(b => b.id === bId).shelf = key;\n        });\n      });\n      this.setState({ Books: curr});\n    });\n  }\n  \n  //Less code lines, but higher execution time (less performance):\n  legacyUpdateBook = (book, shelfId) => {\n    BooksAPI.update(book, shelfId).then(res => {\n      this.getAllBooks();\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route\n          exact path=\"/search\"\n          render={({history}) =>\n            <SearchBooks\n              currBooks={this.state.Books}\n              onShelfChange={(book, shelfId)=> {\n                this.handleShelfChange(book, shelfId);\n                history.push('/');\n              }}\n            />\n          }\n        />\n        <Route\n          exact path=\"/\"\n          render={() =>\n            <ShelfsList\n              books={this.state.Books}\n              onShelfChange={this.handleShelfChange}\n            />\n          }\n        />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}